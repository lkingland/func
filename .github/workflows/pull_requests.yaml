# Build and test all pull requests
name: Pull Requests

on: [pull_request]

jobs:
  build:
    strategy:
      matrix:
        # os: ["ubuntu-latest", "windows-latest", "macos-latest"]
        os: ["macos-latest"]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: "^1.16"
      - name: Determine platform binaries
        id: pkger-binaries
        uses: actions/github-script@v2
        with:
          result-encoding: string
          script: |
            let platform, binary;
            switch ('${{matrix.os}}') {
              case 'ubuntu-latest':
                platform = 'Linux_x86'
                binary = 'pkger'
                break
              case 'windows-latest':
                platform = 'Windows_x86'
                binary = 'pkger.exe'
                break
              case 'macos-latest':
                platform = 'Darwin_x86'
                binary = 'pkger'
                break
            }
            core.setOutput('platform', platform)
            core.setOutput('binary', binary)
      - name: Determine download URL for latest pkger
        id: pkger-download-url
        uses: actions/github-script@v2
        with:
          result-encoding: string
          script: |
            let platform = "${{ steps.pkger-binaries.outputs.platform }}"
            let binary = "${{ steps.pkger-binaries.outputs.binary }}"
            core.info('PLATFORM: ' + platform)
            core.info('BINARY: ' + binary)
            return github.repos.getReleaseByTag({
                owner: "markbates",
                repo: "pkger",
                tag: "v0.17.1"
            }).then(result => {
                return result.data.assets
                  .filter(a => a.name.includes(platform))
                  .map(a => a.browser_download_url)[0];
            })
      - name: Install pkger
        run: |
          curl -s -L -o pkger.tgz ${{ steps.pkger-download-url.outputs.result }}
          tar xvzf pkger.tgz
      - name: Clear Cache
        run: go clean -modcache -testcache -cache
      - name: Unit Test
        run: make test
        env:
          PKGER: "./${{ steps.pkger-binaries.outputs.binary }}"
      - name: Template Unit Tests
        run: make test-templates
        env:
          PKGER: "./${{ steps.pkger-binaries.outputs.binary }}"
      - name: Build
        run: make build
        env:
          PKGER: "./${{ steps.pkger-binaries.outputs.binary }}"
      - name: Lint
        run: make check
      - name: Check that 'func.yaml schema' is up-to-date
        if: matrix.os != 'windows-latest'
        run: make schema-check

  integration-test:
    needs: build
    runs-on: "ubuntu-latest"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: "^1.16"
      - name: Install Podman
        run: |
          . /etc/os-release
          echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_${VERSION_ID}/ /" | sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
          curl -L "https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_${VERSION_ID}/Release.key" | sudo apt-key add -
          sudo apt-get update
          sudo apt-get -y upgrade
          sudo apt-get -y install podman
          podman info
      - name: Install Binaries
        run: ./hack/binaries.sh
      - name: Allocate Cluster
        run: ./hack/allocate.sh
      - name: Local Registry Routing
        run: ./hack/registry.sh
      - name: Verify Configuration
        run: ./hack/test.sh
      - name: Integration Test Podman
        run: ./hack/test-integration-podman.sh
      - name: Integration Test
        run: make test-integration

  e2e-test:
    needs: integration-test
    runs-on: "ubuntu-latest"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: "^1.16"
      - name: Determine download URL for latest pkger
        id: pkger-download-url
        uses: actions/github-script@v2
        with:
          result-encoding: string
          script: |
            let platform = 'Linux_x86'
            return github.repos.getReleaseByTag({
                owner: "markbates",
                repo: "pkger",
                tag: "v0.17.1"
            }).then(result => {
                return result.data.assets
                  .filter(a => a.name.includes(platform))
                  .map(a => a.browser_download_url)[0];
            })
      - name: Install pkger
        run: |
          curl -s -L -o pkger.tgz ${{ steps.pkger-download-url.outputs.result }}
          tar xvzf pkger.tgz
      - name: Build
        run: make build
        env:
          PKGER: "./pkger"
      - name: Install Binaries
        run: ./hack/binaries.sh
      - name: Allocate Cluster
        run: ./hack/allocate.sh
      - name: Local Registry an Routes (CI)
        run: ./hack/registry.sh
      - name: Verify Configuration
        run: ./hack/test.sh
      - name: E2E Test
        run: make test-e2e
